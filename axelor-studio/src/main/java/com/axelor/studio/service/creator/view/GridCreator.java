/*
 * Axelor Business Solutions
 *
 * Copyright (C) 2018 Axelor (<http://axelor.com>).
 *
 * This program is free software: you can redistribute it and/or  modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.axelor.studio.service.creator.view;

import com.axelor.meta.db.MetaView;
import com.axelor.meta.loader.XMLViews;
import com.axelor.meta.schema.ObjectViews;
import com.axelor.meta.schema.views.AbstractView;
import com.axelor.meta.schema.views.GridView;
import com.axelor.studio.db.ViewBuilder;
import com.axelor.studio.db.ViewItem;
import java.lang.invoke.MethodHandles;
import java.util.List;
import javax.xml.bind.JAXBException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This service class generate GridView from ViewBuilder.
 *
 * @author axelor
 */
public class GridCreator extends AbstractViewCreator {

  protected Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());

  /**
   * Root method to access the service to get GridView from ViewBuilder
   *
   * @param viewBuilder ViewBuilder to process
   * @return GridView generated by processing.
   * @throws JAXBException Exception returns in parsing xml.
   */
  public GridView getView(ViewBuilder viewBuilder) throws JAXBException {

    List<ViewItem> viewItems = viewBuilder.getViewItemList();
    if (viewItems.isEmpty()) {
      return null;
    }

    GridView gridView = getGridView(viewBuilder);
    if (gridView == null) {
      return null;
    }

    processCommon(gridView, viewBuilder);
    gridView.setEditable(viewBuilder.getEditable());
    gridView.setOnNew(viewBuilder.getOnNew());

    log.debug("Process grid view: {}", gridView.getName());

    gridView.setItems(updateItems(gridView.getItems(), viewBuilder.getViewItemList()));

    //		processMenuBar(gridView, viewBuilder.getMenubarViewItemList());
    //		processToolBar(gridView, viewBuilder.getToolbarViewItemList());

    return gridView;
  }

  /**
   * Create gridView from parent view's xml
   *
   * @param viewBuilder ViewBuilder containing parent metaView.
   * @return GridView created.
   * @throws JAXBException
   */
  private GridView getGridView(ViewBuilder viewBuilder) throws JAXBException {

    MetaView metaView = viewBuilder.getMetaViewGenerated();

    if (metaView == null) {
      return new GridView();
    }

    ObjectViews objectViews = XMLViews.fromXML(metaView.getXml());
    List<AbstractView> views = objectViews.getViews();
    if (!views.isEmpty()) {
      return (GridView) views.get(0);
    }

    return null;
  }
}
